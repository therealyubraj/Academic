package ABYSS;

import java.awt.Desktop;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.swing.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  A: Anjel
 *          B: Baibhab
 *          Y: Yubraj
 *          S: Samita
 */
public class ABYSS extends javax.swing.JFrame {

    /**
     * Creates new form Coursework
     */
    JFrame mainMenuFrame; //reference variable for the main frame
    int curSortedCol = -1; //int which stores the col number of the last sorted column.
    int newCustId = 0; // int which stores the id for a new customer
    int oldCustId = -1; // int which stores the id for a previous customer

    boolean asc = true; // boolean which determines the order of sorting for the table
    boolean automaticComboBoxChange = false; //boolean which determines whether or not the comboboxes are being changed automatically

    int databaseSelectedRow = -1; //int whihc stores the row selected by the user

    ArrayList<Purchase> allPurchases; //arraylist which stores all the purchases in the application

    ArrayList<ImageIcon> artistImages; // arraylist which stores all the images for the artists

    ArrayList<Song> allSongs; // arraylist which stores all the song objects for this application

    //arraylists which store all the fields for songs independently for faster access time.
    ArrayList<String> allGenres;
    ArrayList<String> allAlbums;
    ArrayList<String> allArtists;
    ArrayList<String> allTitles;

    //username and password for database frame
    String usrname = "admin", password = "1111";

    public ABYSS() {
        //initializatino of arraylists
        artistImages = new ArrayList<>();
        allSongs = new ArrayList<>();
        allGenres = new ArrayList<>();
        allAlbums = new ArrayList<>();
        allArtists = new ArrayList<>();
        allTitles = new ArrayList<>();
        allPurchases = new ArrayList<Purchase>();

        //make GUI deafult function
        initComponents();

        //initialize mainFrame to this
        mainMenuFrame = this;
        mainMenuFrame.setResizable(false); //set resizable to false
        applyMenuBar(mainMenuFrame); //set the menubar to mainframe

        //load all the songs and their iamges from the CSV file
        loadAllSongs();

        //draw the table using arraylsit
        reDrawTableUsingList(false, -1);

        //make fields text or numbers only
        makeFieldTextOnly(nameTextField);
        makeFieldTextOnly(updatedNameField);
        makeFieldNumOnly(phoneTextField);
        makeFieldNumOnly(updatedPhoneField);
        makeFieldTextOnly(searchArtistsTextField);
        makeFieldTextOnly(addressTextField);
        makeFieldTextOnly(updatedAddressField);
    }

    /**
     * Auto generated Code This method is called from within the constructor to
     * initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buyFrame = new javax.swing.JFrame();
        buyFormPanel = new javax.swing.JPanel();
        nameTextField = new javax.swing.JTextField();
        phoneTextField = new javax.swing.JTextField();
        addressTextField = new javax.swing.JTextField();
        genreLabel = new javax.swing.JLabel();
        albumComboBox = new javax.swing.JComboBox<>();
        songLabel = new javax.swing.JLabel();
        purchaseTypeLabel = new javax.swing.JLabel();
        songComboBox = new javax.swing.JComboBox<>();
        costLabel = new javax.swing.JLabel();
        costTextField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        artistComboBox = new javax.swing.JComboBox<>();
        albumLabel = new javax.swing.JLabel();
        genreComboBox = new javax.swing.JComboBox<>();
        artistLabel = new javax.swing.JLabel();
        rentRadioButton = new javax.swing.JRadioButton();
        buyRadioButton = new javax.swing.JRadioButton();
        paidViaLabel = new javax.swing.JLabel();
        cashRadioButton = new javax.swing.JRadioButton();
        cardRadioButton = new javax.swing.JRadioButton();
        epayRadioButton = new javax.swing.JRadioButton();
        buyNavigationPanel = new javax.swing.JPanel();
        buyBackButton = new javax.swing.JButton();
        databaseNavigateButton = new javax.swing.JButton();
        purchaseTypeButtonGroup = new javax.swing.ButtonGroup();
        paidViaButtonGroup = new javax.swing.ButtonGroup();
        databaseFrame = new javax.swing.JFrame();
        databaseNavigationPanel = new javax.swing.JPanel();
        databaseBackButton = new javax.swing.JButton();
        buyNavigateButton = new javax.swing.JButton();
        databaseTablePanel = new javax.swing.JPanel();
        databaseTableScrollPane = new javax.swing.JScrollPane();
        databaseTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        clearSearchButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        searchByComboBox = new javax.swing.JComboBox<>();
        searchByLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        loginFrame = new javax.swing.JFrame();
        loginPanel = new javax.swing.JPanel();
        loginMessageLabel = new javax.swing.JLabel();
        usernameLable = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        backFromLoginButton = new javax.swing.JButton();
        passwordTextField = new javax.swing.JPasswordField();
        updatedPaidViaButtonGroup = new javax.swing.ButtonGroup();
        updatedPurchaseTypeButtonGroup = new javax.swing.ButtonGroup();
        updateDialogBox = new javax.swing.JDialog(databaseFrame);
        updateFormPanel = new javax.swing.JPanel();
        updatedNameField = new javax.swing.JTextField();
        updatedPhoneField = new javax.swing.JTextField();
        updatedAddressField = new javax.swing.JTextField();
        updatedGenreLabel = new javax.swing.JLabel();
        updatedSongLabel = new javax.swing.JLabel();
        updatedPurchaseTypeLabel = new javax.swing.JLabel();
        updatedCostLabel = new javax.swing.JLabel();
        updatedCostField = new javax.swing.JTextField();
        updatedAlbumLabel = new javax.swing.JLabel();
        updatedArtistsLabel = new javax.swing.JLabel();
        updatedRentRadioButton = new javax.swing.JRadioButton();
        updatedBuyRadioButton = new javax.swing.JRadioButton();
        updatedPaidViaLabel = new javax.swing.JLabel();
        updatedCashRadioButton = new javax.swing.JRadioButton();
        updatedCardRadioButton = new javax.swing.JRadioButton();
        updatedEPayRadioButton = new javax.swing.JRadioButton();
        updateRowButton = new javax.swing.JButton();
        updateGenreField = new javax.swing.JTextField();
        updateSongField = new javax.swing.JTextField();
        updateArtistField = new javax.swing.JTextField();
        updateAlbumField = new javax.swing.JTextField();
        discoverArtistsFrame = new javax.swing.JFrame();
        discoverArtistsMainContainer = new javax.swing.JPanel();
        searchArtistsTextField = new javax.swing.JTextField();
        searchArtistsButton = new javax.swing.JButton();
        discoverLabel = new javax.swing.JLabel();
        backFromDiscoverButton = new javax.swing.JButton();
        artistsShowcaseFrame = new javax.swing.JFrame();
        artistsMainContainer = new javax.swing.JPanel();
        backFromShowcaseButton = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        artistsSongsLabel = new javax.swing.JLabel();
        artistNameLabel = new javax.swing.JLabel();
        showcaseGenreLabel = new javax.swing.JLabel();
        showcaseAlbumsComboBox = new javax.swing.JComboBox<>();
        staticAlbumsLabelShowcase = new javax.swing.JLabel();
        staticGenreLabelShowcase = new javax.swing.JLabel();
        staticAlbumsLabelShowcase1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFileOption = new javax.swing.JMenu();
        menuOpenOption = new javax.swing.JMenuItem();
        menuExitOption = new javax.swing.JMenuItem();
        menuAboutOption = new javax.swing.JMenu();
        Help = new javax.swing.JMenuItem();
        mainMenuPanel = new javax.swing.JPanel();
        mainMenuBuyButton = new javax.swing.JButton();
        mainMenuDatabaseButton = new javax.swing.JButton();
        mainMenuSearchArtistsButton = new javax.swing.JButton();

        buyFormPanel.setBackground(new java.awt.Color(254, 251, 233));

        nameTextField.setBackground(new java.awt.Color(225, 238, 221));
        nameTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Name", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(24, 58, 29))); // NOI18N

        phoneTextField.setBackground(new java.awt.Color(225, 238, 221));
        phoneTextField.setToolTipText("");
        phoneTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Phone", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(24, 58, 29))); // NOI18N
        phoneTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneTextFieldActionPerformed(evt);
            }
        });
        phoneTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phoneTextFieldKeyReleased(evt);
            }
        });

        addressTextField.setBackground(new java.awt.Color(225, 238, 221));
        addressTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Address", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(24, 58, 29))); // NOI18N

        genreLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        genreLabel.setForeground(new java.awt.Color(24, 58, 29));
        genreLabel.setText("Genre:");

        albumComboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        albumComboBox.setForeground(new java.awt.Color(24, 58, 29));
        albumComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Item 2", "Item 3", "Item 4" }));
        albumComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                albumComboBoxActionPerformed(evt);
            }
        });

        songLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        songLabel.setForeground(new java.awt.Color(24, 58, 29));
        songLabel.setText("Song:");

        purchaseTypeLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        purchaseTypeLabel.setForeground(new java.awt.Color(24, 58, 29));
        purchaseTypeLabel.setText("Type of Purchase:");

        songComboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        songComboBox.setForeground(new java.awt.Color(24, 58, 29));
        songComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Item 2", "Item 3", "Item 4" }));
        songComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songComboBoxActionPerformed(evt);
            }
        });

        costLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        costLabel.setForeground(new java.awt.Color(24, 58, 29));
        costLabel.setText("Cost:");

        costTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        costTextField.setEnabled(false);

        clearButton.setBackground(new java.awt.Color(24, 58, 29));
        clearButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        doneButton.setBackground(new java.awt.Color(24, 58, 29));
        doneButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        doneButton.setForeground(new java.awt.Color(255, 255, 255));
        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        artistComboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        artistComboBox.setForeground(new java.awt.Color(24, 58, 29));
        artistComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Item 2", "Item 3", "Item 4" }));
        artistComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistComboBoxActionPerformed(evt);
            }
        });

        albumLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        albumLabel.setForeground(new java.awt.Color(24, 58, 29));
        albumLabel.setText("Album:");

        genreComboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        genreComboBox.setForeground(new java.awt.Color(24, 58, 29));
        genreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Item 2", "Item 3", "Item 4" }));
        genreComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreComboBoxActionPerformed(evt);
            }
        });

        artistLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        artistLabel.setForeground(new java.awt.Color(24, 58, 29));
        artistLabel.setText("Artist:");

        purchaseTypeButtonGroup.add(rentRadioButton);
        rentRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        rentRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        rentRadioButton.setSelected(true);
        rentRadioButton.setText("Rent");
        rentRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentRadioButtonActionPerformed(evt);
            }
        });

        purchaseTypeButtonGroup.add(buyRadioButton);
        buyRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        buyRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        buyRadioButton.setText("Buy");
        buyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyRadioButtonActionPerformed(evt);
            }
        });

        paidViaLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        paidViaLabel.setForeground(new java.awt.Color(24, 58, 29));
        paidViaLabel.setText("Paid via:");

        paidViaButtonGroup.add(cashRadioButton);
        cashRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        cashRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        cashRadioButton.setSelected(true);
        cashRadioButton.setText("Cash");

        paidViaButtonGroup.add(cardRadioButton);
        cardRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        cardRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        cardRadioButton.setText("Card");
        cardRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashRadioButtonActionPerformed(evt);
            }
        });

        paidViaButtonGroup.add(epayRadioButton);
        epayRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        epayRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        epayRadioButton.setText("E-Payment");
        epayRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buyFormPanelLayout = new javax.swing.GroupLayout(buyFormPanel);
        buyFormPanel.setLayout(buyFormPanelLayout);
        buyFormPanelLayout.setHorizontalGroup(
            buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyFormPanelLayout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buyFormPanelLayout.createSequentialGroup()
                        .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(buyFormPanelLayout.createSequentialGroup()
                                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(buyFormPanelLayout.createSequentialGroup()
                                    .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(buyFormPanelLayout.createSequentialGroup()
                                            .addComponent(genreLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, buyFormPanelLayout.createSequentialGroup()
                                            .addComponent(albumLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(albumComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(96, 96, 96)
                                    .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(songLabel)
                                        .addComponent(artistLabel))))
                            .addGroup(buyFormPanelLayout.createSequentialGroup()
                                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(purchaseTypeLabel)
                                    .addGroup(buyFormPanelLayout.createSequentialGroup()
                                        .addComponent(paidViaLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cashRadioButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(buyFormPanelLayout.createSequentialGroup()
                                        .addComponent(cardRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(epayRadioButton))
                                    .addGroup(buyFormPanelLayout.createSequentialGroup()
                                        .addComponent(rentRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(buyRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(costTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(artistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(songComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(costLabel))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        buyFormPanelLayout.setVerticalGroup(
            buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyFormPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(artistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(artistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(albumComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(albumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(songLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(songComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(purchaseTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rentRadioButton)
                    .addComponent(buyRadioButton)
                    .addComponent(costLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paidViaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashRadioButton)
                    .addComponent(cardRadioButton)
                    .addComponent(epayRadioButton)
                    .addComponent(costTextField))
                .addGap(16, 16, 16)
                .addGroup(buyFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        rentRadioButton.setActionCommand("Rent");
        buyRadioButton.setActionCommand("Buy");
        cashRadioButton.setActionCommand("Cash");
        cardRadioButton.setActionCommand("Card");
        epayRadioButton.setActionCommand("E-pay");

        buyNavigationPanel.setBackground(new java.awt.Color(225, 238, 221));

        buyBackButton.setBackground(new java.awt.Color(24, 58, 29));
        buyBackButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buyBackButton.setForeground(new java.awt.Color(255, 255, 255));
        buyBackButton.setText("←");
        buyBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBackButtonActionPerformed(evt);
            }
        });

        databaseNavigateButton.setBackground(new java.awt.Color(24, 58, 29));
        databaseNavigateButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        databaseNavigateButton.setForeground(new java.awt.Color(255, 255, 255));
        databaseNavigateButton.setText("Database");
        databaseNavigateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseNavigateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buyNavigationPanelLayout = new javax.swing.GroupLayout(buyNavigationPanel);
        buyNavigationPanel.setLayout(buyNavigationPanelLayout);
        buyNavigationPanelLayout.setHorizontalGroup(
            buyNavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buyBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(databaseNavigateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
        );
        buyNavigationPanelLayout.setVerticalGroup(
            buyNavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyNavigationPanelLayout.createSequentialGroup()
                .addComponent(buyBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(databaseNavigateButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout buyFrameLayout = new javax.swing.GroupLayout(buyFrame.getContentPane());
        buyFrame.getContentPane().setLayout(buyFrameLayout);
        buyFrameLayout.setHorizontalGroup(
            buyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buyFrameLayout.createSequentialGroup()
                .addComponent(buyNavigationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buyFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        buyFrameLayout.setVerticalGroup(
            buyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buyNavigationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buyFormPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        buyFrame.setSize(690,400);
        buyFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        buyFrame.setResizable(false);

        databaseNavigationPanel.setBackground(new java.awt.Color(225, 238, 221));

        databaseBackButton.setBackground(new java.awt.Color(24, 58, 29));
        databaseBackButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        databaseBackButton.setForeground(new java.awt.Color(254, 251, 233));
        databaseBackButton.setText("←");
        databaseBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseBackButtonActionPerformed(evt);
            }
        });

        buyNavigateButton.setBackground(new java.awt.Color(24, 58, 29));
        buyNavigateButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        buyNavigateButton.setForeground(new java.awt.Color(254, 251, 233));
        buyNavigateButton.setText("Buy/Rent");
        buyNavigateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyNavigateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout databaseNavigationPanelLayout = new javax.swing.GroupLayout(databaseNavigationPanel);
        databaseNavigationPanel.setLayout(databaseNavigationPanelLayout);
        databaseNavigationPanelLayout.setHorizontalGroup(
            databaseNavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(databaseBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buyNavigateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );
        databaseNavigationPanelLayout.setVerticalGroup(
            databaseNavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseNavigationPanelLayout.createSequentialGroup()
                .addComponent(databaseBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buyNavigateButton)
                .addGap(0, 281, Short.MAX_VALUE))
        );

        databaseTablePanel.setBackground(new java.awt.Color(254, 251, 233));

        databaseTable.setBackground(new java.awt.Color(225, 238, 221));
        databaseTable.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        databaseTable.setForeground(new java.awt.Color(24, 58, 29));
        databaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Phone", "Address", "Genre", "Artist", "Album", "Title", "Purchase Type", "Paid via", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        databaseTable.getTableHeader().setReorderingAllowed(false);
        databaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                databaseTableMouseReleased(evt);
            }
        });
        databaseTableScrollPane.setViewportView(databaseTable);
        databaseTable.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter(){
            public void mouseClicked(java.awt.event.MouseEvent e){
                int col = databaseTable.columnAtPoint(e.getPoint());
                reDrawTableUsingList(true, col);
                updateButton.setEnabled(false);
                deleteButton.setEnabled(false);
                databaseSelectedRow = -1;
                if(!searchTextField.getText().equals("")) clearSearch();
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        searchTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        clearSearchButton.setBackground(new java.awt.Color(24, 58, 29));
        clearSearchButton.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        clearSearchButton.setForeground(new java.awt.Color(254, 251, 233));
        clearSearchButton.setText("Clear Search");
        clearSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSearchButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateButton.setText("Update");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        searchByComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchByComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Customer ID", "Name", "Phone", "Address", "Genre", "Artist", "Album", "Title", "Purchase Type", "Paid Via", "Cost" }));

        searchByLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchByLabel.setText("Search By:");

        searchLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchLabel.setText("Search:");

        javax.swing.GroupLayout databaseTablePanelLayout = new javax.swing.GroupLayout(databaseTablePanel);
        databaseTablePanel.setLayout(databaseTablePanelLayout);
        databaseTablePanelLayout.setHorizontalGroup(
            databaseTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(databaseTableScrollPane)
            .addGroup(databaseTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(databaseTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(databaseTablePanelLayout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchByLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(clearSearchButton)
                        .addGap(29, 29, 29))
                    .addGroup(databaseTablePanelLayout.createSequentialGroup()
                        .addComponent(updateButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        databaseTablePanelLayout.setVerticalGroup(
            databaseTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseTablePanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(databaseTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByLabel)
                    .addComponent(searchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(databaseTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(deleteButton))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout databaseFrameLayout = new javax.swing.GroupLayout(databaseFrame.getContentPane());
        databaseFrame.getContentPane().setLayout(databaseFrameLayout);
        databaseFrameLayout.setHorizontalGroup(
            databaseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, databaseFrameLayout.createSequentialGroup()
                .addGap(0, 136, Short.MAX_VALUE)
                .addComponent(databaseTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(databaseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(databaseFrameLayout.createSequentialGroup()
                    .addComponent(databaseNavigationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 883, Short.MAX_VALUE)))
        );
        databaseFrameLayout.setVerticalGroup(
            databaseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(databaseTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(databaseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(databaseNavigationPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        databaseFrame.setSize(1003,350);
        databaseFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        databaseFrame.setResizable(false);

        loginPanel.setBackground(new java.awt.Color(254, 251, 233));

        loginMessageLabel.setFont(new java.awt.Font("Comic Sans MS", 3, 14)); // NOI18N
        loginMessageLabel.setForeground(new java.awt.Color(24, 58, 29));
        loginMessageLabel.setText(" Enter login details to get access to the database");

        usernameLable.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        usernameLable.setForeground(new java.awt.Color(24, 58, 29));
        usernameLable.setText("Username");

        passwordLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(24, 58, 29));
        passwordLabel.setText("Password");

        usernameTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        loginButton.setBackground(new java.awt.Color(24, 58, 29));
        loginButton.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        loginButton.setForeground(new java.awt.Color(254, 251, 233));
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        backFromLoginButton.setBackground(new java.awt.Color(24, 58, 29));
        backFromLoginButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backFromLoginButton.setForeground(new java.awt.Color(254, 251, 233));
        backFromLoginButton.setText("←");
        backFromLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromLoginButtonActionPerformed(evt);
            }
        });

        passwordTextField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(0, 36, Short.MAX_VALUE)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLable)
                    .addComponent(passwordLabel)
                    .addComponent(backFromLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(loginButton)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(backFromLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout loginFrameLayout = new javax.swing.GroupLayout(loginFrame.getContentPane());
        loginFrame.getContentPane().setLayout(loginFrameLayout);
        loginFrameLayout.setHorizontalGroup(
            loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        loginFrameLayout.setVerticalGroup(
            loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        loginFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        loginFrame.setResizable(false);
        loginFrame.setSize(450, 250);

        updateDialogBox.setAlwaysOnTop(true);
        updateDialogBox.setModal(true);

        updateFormPanel.setBackground(new java.awt.Color(254, 251, 233));

        updatedNameField.setBackground(new java.awt.Color(225, 238, 221));
        updatedNameField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Name", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(24, 58, 29))); // NOI18N

        updatedPhoneField.setBackground(new java.awt.Color(225, 238, 221));
        updatedPhoneField.setToolTipText("");
        updatedPhoneField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Phone", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(24, 58, 29))); // NOI18N

        updatedAddressField.setBackground(new java.awt.Color(225, 238, 221));
        updatedAddressField.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        updatedAddressField.setForeground(new java.awt.Color(24, 58, 29));
        updatedAddressField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Address", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(24, 58, 29))); // NOI18N

        updatedGenreLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        updatedGenreLabel.setForeground(new java.awt.Color(24, 58, 29));
        updatedGenreLabel.setText("Genre:");

        updatedSongLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        updatedSongLabel.setForeground(new java.awt.Color(24, 58, 29));
        updatedSongLabel.setText("Song:");

        updatedPurchaseTypeLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        updatedPurchaseTypeLabel.setForeground(new java.awt.Color(24, 58, 29));
        updatedPurchaseTypeLabel.setText("Type of Purchase:");

        updatedCostLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        updatedCostLabel.setForeground(new java.awt.Color(24, 58, 29));
        updatedCostLabel.setText("Cost:");

        updatedCostField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        updatedAlbumLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        updatedAlbumLabel.setForeground(new java.awt.Color(24, 58, 29));
        updatedAlbumLabel.setText("Album:");

        updatedArtistsLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        updatedArtistsLabel.setForeground(new java.awt.Color(24, 58, 29));
        updatedArtistsLabel.setText("Artist:");

        updatedPurchaseTypeButtonGroup.add(updatedRentRadioButton);
        updatedRentRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        updatedRentRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        updatedRentRadioButton.setSelected(true);
        updatedRentRadioButton.setText("Rent");

        updatedPurchaseTypeButtonGroup.add(updatedBuyRadioButton);
        updatedBuyRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        updatedBuyRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        updatedBuyRadioButton.setText("Buy");

        updatedPaidViaLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        updatedPaidViaLabel.setForeground(new java.awt.Color(24, 58, 29));
        updatedPaidViaLabel.setText("Paid via:");

        updatedPaidViaButtonGroup.add(updatedCashRadioButton);
        updatedCashRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        updatedCashRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        updatedCashRadioButton.setSelected(true);
        updatedCashRadioButton.setText("Cash");

        updatedPaidViaButtonGroup.add(updatedCardRadioButton);
        updatedCardRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        updatedCardRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        updatedCardRadioButton.setText("Card");

        updatedPaidViaButtonGroup.add(updatedEPayRadioButton);
        updatedEPayRadioButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        updatedEPayRadioButton.setForeground(new java.awt.Color(24, 58, 29));
        updatedEPayRadioButton.setText("E-Payment");

        updateRowButton.setBackground(new java.awt.Color(24, 58, 29));
        updateRowButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        updateRowButton.setForeground(new java.awt.Color(254, 251, 233));
        updateRowButton.setText("Update");
        updateRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateFormPanelLayout = new javax.swing.GroupLayout(updateFormPanel);
        updateFormPanel.setLayout(updateFormPanelLayout);
        updateFormPanelLayout.setHorizontalGroup(
            updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(updateFormPanelLayout.createSequentialGroup()
                            .addComponent(updatedNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(updatedPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(updateFormPanelLayout.createSequentialGroup()
                            .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateFormPanelLayout.createSequentialGroup()
                                    .addComponent(updatedGenreLabel)
                                    .addGap(18, 18, 18))
                                .addGroup(updateFormPanelLayout.createSequentialGroup()
                                    .addComponent(updatedAlbumLabel)
                                    .addGap(16, 16, 16)))
                            .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(updateGenreField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updateAlbumField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(88, 88, 88)
                            .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(updatedSongLabel)
                                .addComponent(updatedArtistsLabel))))
                    .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(updateRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(updateFormPanelLayout.createSequentialGroup()
                            .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(updatedPurchaseTypeLabel)
                                .addGroup(updateFormPanelLayout.createSequentialGroup()
                                    .addComponent(updatedPaidViaLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(updatedCashRadioButton)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(updateFormPanelLayout.createSequentialGroup()
                                    .addComponent(updatedCardRadioButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(updatedEPayRadioButton))
                                .addGroup(updateFormPanelLayout.createSequentialGroup()
                                    .addComponent(updatedRentRadioButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(updatedBuyRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(41, 41, 41)
                .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updatedAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(updateFormPanelLayout.createSequentialGroup()
                        .addComponent(updatedCostLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updatedCostField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updateArtistField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateSongField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        updateFormPanelLayout.setVerticalGroup(
            updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatedNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateFormPanelLayout.createSequentialGroup()
                        .addComponent(updateGenreField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updatedAlbumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatedSongLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateAlbumField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(updateFormPanelLayout.createSequentialGroup()
                        .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updatedGenreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatedArtistsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateArtistField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(updateSongField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatedPurchaseTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedRentRadioButton)
                    .addComponent(updatedBuyRadioButton)
                    .addComponent(updatedCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedCostField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatedPaidViaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedCashRadioButton)
                    .addComponent(updatedCardRadioButton)
                    .addComponent(updatedEPayRadioButton))
                .addGap(18, 18, 18)
                .addComponent(updateRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        updatedRentRadioButton.setActionCommand("Rent");
        updatedBuyRadioButton.setActionCommand("Buy");
        updatedCashRadioButton.setActionCommand("Cash");
        updatedCardRadioButton.setActionCommand("Card");
        updatedEPayRadioButton.setActionCommand("E-pay");

        javax.swing.GroupLayout updateDialogBoxLayout = new javax.swing.GroupLayout(updateDialogBox.getContentPane());
        updateDialogBox.getContentPane().setLayout(updateDialogBoxLayout);
        updateDialogBoxLayout.setHorizontalGroup(
            updateDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 547, Short.MAX_VALUE)
            .addGroup(updateDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateDialogBoxLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(updateFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        updateDialogBoxLayout.setVerticalGroup(
            updateDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
            .addGroup(updateDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateDialogBoxLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(updateFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        updateDialogBox.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        updateDialogBox.setSize(560, 400);
        updateDialogBox.setResizable(false);

        discoverArtistsMainContainer.setBackground(new java.awt.Color(254, 251, 233));

        searchArtistsTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        searchArtistsButton.setBackground(new java.awt.Color(24, 58, 29));
        searchArtistsButton.setFont(new java.awt.Font("Comic Sans MS", 1, 11)); // NOI18N
        searchArtistsButton.setForeground(new java.awt.Color(254, 251, 233));
        searchArtistsButton.setText("SEARCH!");
        searchArtistsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchArtistsButtonActionPerformed(evt);
            }
        });

        discoverLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        discoverLabel.setForeground(new java.awt.Color(24, 58, 29));
        discoverLabel.setText("DISCOVER");

        backFromDiscoverButton.setBackground(new java.awt.Color(24, 58, 29));
        backFromDiscoverButton.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        backFromDiscoverButton.setForeground(new java.awt.Color(254, 251, 233));
        backFromDiscoverButton.setText("←");
        backFromDiscoverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromDiscoverButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout discoverArtistsMainContainerLayout = new javax.swing.GroupLayout(discoverArtistsMainContainer);
        discoverArtistsMainContainer.setLayout(discoverArtistsMainContainerLayout);
        discoverArtistsMainContainerLayout.setHorizontalGroup(
            discoverArtistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discoverArtistsMainContainerLayout.createSequentialGroup()
                .addGroup(discoverArtistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(discoverArtistsMainContainerLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(discoverLabel))
                    .addGroup(discoverArtistsMainContainerLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(searchArtistsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchArtistsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(discoverArtistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(discoverArtistsMainContainerLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(backFromDiscoverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(354, Short.MAX_VALUE)))
        );
        discoverArtistsMainContainerLayout.setVerticalGroup(
            discoverArtistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discoverArtistsMainContainerLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(discoverLabel)
                .addGap(18, 18, 18)
                .addGroup(discoverArtistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchArtistsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchArtistsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(72, Short.MAX_VALUE))
            .addGroup(discoverArtistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(discoverArtistsMainContainerLayout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(backFromDiscoverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(161, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout discoverArtistsFrameLayout = new javax.swing.GroupLayout(discoverArtistsFrame.getContentPane());
        discoverArtistsFrame.getContentPane().setLayout(discoverArtistsFrameLayout);
        discoverArtistsFrameLayout.setHorizontalGroup(
            discoverArtistsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discoverArtistsFrameLayout.createSequentialGroup()
                .addComponent(discoverArtistsMainContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        discoverArtistsFrameLayout.setVerticalGroup(
            discoverArtistsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discoverArtistsFrameLayout.createSequentialGroup()
                .addComponent(discoverArtistsMainContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        discoverArtistsFrame.setSize(450, 300);
        discoverArtistsFrame.setResizable(false);
        discoverArtistsFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        artistsShowcaseFrame.setBackground(new java.awt.Color(102, 255, 255));

        artistsMainContainer.setBackground(new java.awt.Color(254, 251, 233));

        backFromShowcaseButton.setBackground(new java.awt.Color(24, 58, 29));
        backFromShowcaseButton.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        backFromShowcaseButton.setForeground(new java.awt.Color(254, 251, 233));
        backFromShowcaseButton.setText("←");
        backFromShowcaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromShowcaseButtonActionPerformed(evt);
            }
        });

        artistsSongsLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        artistsSongsLabel.setForeground(new java.awt.Color(24, 58, 29));
        artistsSongsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        artistsSongsLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        artistNameLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        artistNameLabel.setForeground(new java.awt.Color(24, 58, 29));
        artistNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        showcaseGenreLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        showcaseGenreLabel.setForeground(new java.awt.Color(24, 58, 29));

        showcaseAlbumsComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        showcaseAlbumsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showcaseAlbumsComboBoxActionPerformed(evt);
            }
        });

        staticAlbumsLabelShowcase.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        staticAlbumsLabelShowcase.setForeground(new java.awt.Color(24, 58, 29));
        staticAlbumsLabelShowcase.setText("Albums:");

        staticGenreLabelShowcase.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        staticGenreLabelShowcase.setForeground(new java.awt.Color(24, 58, 29));
        staticGenreLabelShowcase.setText("Genres:");

        staticAlbumsLabelShowcase1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        staticAlbumsLabelShowcase1.setForeground(new java.awt.Color(24, 58, 29));
        staticAlbumsLabelShowcase1.setText("Songs:");

        javax.swing.GroupLayout artistsMainContainerLayout = new javax.swing.GroupLayout(artistsMainContainer);
        artistsMainContainer.setLayout(artistsMainContainerLayout);
        artistsMainContainerLayout.setHorizontalGroup(
            artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(artistsMainContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addGroup(artistsMainContainerLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(backFromShowcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(artistNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, artistsMainContainerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(artistsSongsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(artistsMainContainerLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(artistsMainContainerLayout.createSequentialGroup()
                                .addComponent(staticAlbumsLabelShowcase1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, artistsMainContainerLayout.createSequentialGroup()
                                .addComponent(staticGenreLabelShowcase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(showcaseGenreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(41, 41, 41))
                            .addGroup(artistsMainContainerLayout.createSequentialGroup()
                                .addComponent(staticAlbumsLabelShowcase, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showcaseAlbumsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34))))))
        );
        artistsMainContainerLayout.setVerticalGroup(
            artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(artistsMainContainerLayout.createSequentialGroup()
                .addGroup(artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(artistsMainContainerLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(staticGenreLabelShowcase)
                            .addComponent(backFromShowcaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, artistsMainContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(showcaseGenreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staticAlbumsLabelShowcase)
                    .addComponent(showcaseAlbumsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(artistsMainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(artistsMainContainerLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(artistNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(artistsMainContainerLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(staticAlbumsLabelShowcase1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(artistsSongsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout artistsShowcaseFrameLayout = new javax.swing.GroupLayout(artistsShowcaseFrame.getContentPane());
        artistsShowcaseFrame.getContentPane().setLayout(artistsShowcaseFrameLayout);
        artistsShowcaseFrameLayout.setHorizontalGroup(
            artistsShowcaseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(artistsMainContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        artistsShowcaseFrameLayout.setVerticalGroup(
            artistsShowcaseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(artistsMainContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        artistsShowcaseFrame.setSize(585, 470);
        artistsShowcaseFrame.setResizable(false);
        artistsShowcaseFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        menuFileOption.setText("File");

        menuOpenOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuOpenOption.setText("Open...");
        menuOpenOption.setEnabled(false);
        menuOpenOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenOptionActionPerformed(evt);
            }
        });
        menuFileOption.add(menuOpenOption);

        menuExitOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        menuExitOption.setText("Exit");
        menuExitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitOptionActionPerformed(evt);
            }
        });
        menuFileOption.add(menuExitOption);

        menuBar.add(menuFileOption);

        menuAboutOption.setText("About");

        Help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        Help.setText("Help");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });
        menuAboutOption.add(Help);

        menuBar.add(menuAboutOption);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainMenuPanel.setBackground(new java.awt.Color(254, 251, 233));

        mainMenuBuyButton.setBackground(new java.awt.Color(24, 58, 29));
        mainMenuBuyButton.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        mainMenuBuyButton.setForeground(new java.awt.Color(254, 251, 233));
        mainMenuBuyButton.setText("Buy/Rent");
        mainMenuBuyButton.setBorder(null);
        mainMenuBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuBuyButtonActionPerformed(evt);
            }
        });

        mainMenuDatabaseButton.setBackground(new java.awt.Color(24, 58, 29));
        mainMenuDatabaseButton.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        mainMenuDatabaseButton.setForeground(new java.awt.Color(254, 251, 233));
        mainMenuDatabaseButton.setText("Database");
        mainMenuDatabaseButton.setBorder(null);
        mainMenuDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuDatabaseButtonActionPerformed(evt);
            }
        });

        mainMenuSearchArtistsButton.setBackground(new java.awt.Color(24, 58, 29));
        mainMenuSearchArtistsButton.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        mainMenuSearchArtistsButton.setForeground(new java.awt.Color(254, 251, 233));
        mainMenuSearchArtistsButton.setText("Discover Artists");
        mainMenuSearchArtistsButton.setBorder(null);
        mainMenuSearchArtistsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuSearchArtistsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuPanelLayout = new javax.swing.GroupLayout(mainMenuPanel);
        mainMenuPanel.setLayout(mainMenuPanelLayout);
        mainMenuPanelLayout.setHorizontalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainMenuSearchArtistsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainMenuBuyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainMenuDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        mainMenuPanelLayout.setVerticalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(mainMenuBuyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainMenuDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mainMenuSearchArtistsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainMenuPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainMenuBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuBuyButtonActionPerformed
        // go to buy frame:
        hideMainFrame();
        showBuyFrame();
    }//GEN-LAST:event_mainMenuBuyButtonActionPerformed

    private void buyBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBackButtonActionPerformed
        // go to main frame:
        showMainFrame();
        hideBuyFrame();
    }//GEN-LAST:event_buyBackButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // validate the data and add to the list
        String custId, custName, custPhone, custAddress, genre, artist, album, title, purchaseType, paidVia;
        float cost;

        //get the customer details
        custName = nameTextField.getText();
        custPhone = phoneTextField.getText();
        custAddress = addressTextField.getText();

        //verirfication
        if (custName.equals("") || custPhone.equals("") || custAddress.equals("")) {
            //if not valid, show message
            JOptionPane.showMessageDialog(buyFrame, "Please enter valid Customer Details.", "Customer Details Error.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //phone number length validation
        if (custPhone.length() != 10) {
            JOptionPane.showMessageDialog(buyFrame, "Please enter valid Phone number.", "Phone number Error.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //get other data
        genre = (String) genreComboBox.getSelectedItem();
        artist = (String) artistComboBox.getSelectedItem();
        album = (String) albumComboBox.getSelectedItem();
        title = (String) songComboBox.getSelectedItem();
        purchaseType = purchaseTypeButtonGroup.getSelection().getActionCommand();
        paidVia = paidViaButtonGroup.getSelection().getActionCommand();
        cost = Float.parseFloat(costTextField.getText());

        //add new item to allPurchases
        addToList(custName, custPhone, custAddress, genre, artist, album, title, purchaseType, paidVia, cost, true);

        //ask user for another purchase
        Object[] options = {"Yes", "No"}; // 0 = yes, 1 = no
        int userSelection = JOptionPane.showOptionDialog(buyFrame,
                "Would you like to purchase another song?",
                "Purchase Again?",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                null);

        //if user does not want another purchase hide this frame
        if (userSelection == 1) {
            clearAllBuyFields(true);
            resetOldCustomerId();
            hideBuyFrame();
            showMainFrame();
            return;
        }

        // else reset the fields for another purchase
        clearAllBuyFields(false);
    }//GEN-LAST:event_doneButtonActionPerformed

    private void databaseBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseBackButtonActionPerformed
        // hide database frame and show main frame
        hideDatabaseFrame();
        showMainFrame();
    }//GEN-LAST:event_databaseBackButtonActionPerformed

    private void buyNavigateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyNavigateButtonActionPerformed
        // hide database frame and show buy frame
        hideDatabaseFrame();
        showBuyFrame();
    }//GEN-LAST:event_buyNavigateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // delete the user selected row
        deleteSelectedRow();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // ready and show the update dialog box
        readyUpdateDialog();
        showUpdateDialog();
    }//GEN-LAST:event_updateButtonActionPerformed


    private void buyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyRadioButtonActionPerformed
        // change the price of the song according to radio button selection
        setPriceFromSongName();
    }//GEN-LAST:event_buyRadioButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // clear all the fields of buy frame
        clearAllBuyFields(true);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void mainMenuDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuDatabaseButtonActionPerformed
        // hide main frame and show login frame
        hideMainFrame();
        showLoginFrame();
    }//GEN-LAST:event_mainMenuDatabaseButtonActionPerformed

    private void phoneTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTextFieldKeyReleased
        //key released has to be repeated because of added binary search
        String usrPhoneNo = phoneTextField.getText();

        //dont allow user to enter anything except digits
        try {
            Integer.parseInt(usrPhoneNo);
        } catch (NumberFormatException e) {
            String newString = "";
            for (int i = 0; i < usrPhoneNo.length(); i++) {
                char iChar = usrPhoneNo.charAt(i);
                int charAsc = (int) iChar;

                if (charAsc < 48 || charAsc > 57) {
                    continue;
                }

                newString += iChar;
            }
            phoneTextField.setText(newString);
        }

        usrPhoneNo = phoneTextField.getText();

        //if length is 10 check if this phone number has already been added to database
        if (usrPhoneNo.length() == 10) {
            String[] allPhones = new String[allPurchases.size()];
            int[] sortedIntoUnsorted = new int[allPurchases.size()];

            for (int i = 0; i < allPurchases.size(); i++) {
                allPhones[allPurchases.get(i).sortedOrder[2]] = allPurchases.get(i).custPhone;
                sortedIntoUnsorted[allPurchases.get(i).sortedOrder[2]] = i;
            }

            //search for user phone number in the table
            int indOfUsrPhone = binarySearchElement(allPhones, usrPhoneNo);

            //if found
            if (indOfUsrPhone != -1) {
                indOfUsrPhone = sortedIntoUnsorted[indOfUsrPhone];
                Purchase prevPurchase = allPurchases.get(indOfUsrPhone);
                Object[] options = {"Yes", "No"};

                //ask user if they want to auto-fill details using previoous purchase
                int userSelection = JOptionPane.showOptionDialog(buyFrame,
                        "Would you like to fill other details based on this phone number? \n"
                        + "Name : " + prevPurchase.custName
                        + "\nPhone : " + prevPurchase.custPhone
                        + "\nAddress : " + prevPurchase.custAddress,
                        "Same Customer?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        null);

                //if they say yes, auto fill the data
                if (userSelection != 1) {
                    oldCustId = Integer.parseInt(prevPurchase.custId);
                    nameTextField.setText(prevPurchase.custName);
                    addressTextField.setText(prevPurchase.custAddress);
                    return;
                }
            }

        }
    }//GEN-LAST:event_phoneTextFieldKeyReleased

    private void databaseTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_databaseTableMouseReleased
        // enable the update and delete buttons
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);

        //set the selected row to user selected row
        databaseSelectedRow = databaseTable.getSelectedRow();
    }//GEN-LAST:event_databaseTableMouseReleased

    private void updateRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRowButtonActionPerformed
        // get all the values from the update box
        String updatedName = updatedNameField.getText();
        String updatedAddress = updatedAddressField.getText();
        String updatedPhone = updatedPhoneField.getText();
        String updatedPurchaseType = updatedPurchaseTypeButtonGroup.getSelection().getActionCommand();
        String updatedPaidVia = updatedPaidViaButtonGroup.getSelection().getActionCommand();
        String updatedGenre = updateGenreField.getText();
        String updatedArtist = updateArtistField.getText();
        String updatedAlbum = updateAlbumField.getText();
        String updatedSong = updateSongField.getText();

        //validate the customer details
        if (updatedName.equals("") || updatedPhone.equals("") || updatedAddress.equals("")) {
            JOptionPane.showMessageDialog(updateDialogBox, "Please enter valid Customer Details.", "Customer Details Error.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //validate the phone number
        if (updatedPhone.length() != 10) {
            JOptionPane.showMessageDialog(updateDialogBox, "Please enter valid Phone number.", "Phone number Error.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //validate the song details
        if (updatedSong.equals("") || updatedGenre.equals("") || updatedAlbum.equals("") || updatedArtist.equals("")) {
            JOptionPane.showMessageDialog(updateDialogBox, "Please enter correct song details.", "Empty song details.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //validate the cost
        float updatedCost = -1.f;
        try {
            updatedCost = Float.parseFloat(updatedCostField.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(updateDialogBox, "Please enter valid price.", "Invaid Price.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //store the purchase
        Purchase p = allPurchases.get(databaseSelectedRow);

        //delete the row from table
        deleteSelectedRow();

        //add the updated row
        addToList(p.custId, updatedName, updatedPhone, updatedAddress, updatedGenre, updatedArtist, updatedAlbum, updatedSong, updatedPaidVia, updatedPurchaseType, updatedCost, true);

        //hide dialog box   
        hideUpdateDialog();
    }//GEN-LAST:event_updateRowButtonActionPerformed

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        // redraw table
        reDrawTableUsingList(false, -1);

        String searchValue = searchTextField.getText().toLowerCase();

        //if its empty dont go further
        if (searchValue.equals("")) {
            return;
        }

        //delete rows that dont match the search criteria
        int colToSearch = searchByComboBox.getSelectedIndex();
        int numOfDeletedRows = 0;
        for (int i = 0; i < allPurchases.size(); i++) {
            String colVal = allPurchases.get(i).getInTableFormat()[colToSearch].toLowerCase();
            if (!colVal.contains(searchValue)) {
                DefaultTableModel dtm = (DefaultTableModel) databaseTable.getModel();
                dtm.removeRow(i - numOfDeletedRows);
                numOfDeletedRows++;
            }
        }
    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void clearSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSearchButtonActionPerformed
        // clear the search text field
        clearSearch();
    }//GEN-LAST:event_clearSearchButtonActionPerformed

    private void databaseNavigateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseNavigateButtonActionPerformed
        // hide buy frame and show login frame
        hideBuyFrame();
        showLoginFrame();
    }//GEN-LAST:event_databaseNavigateButtonActionPerformed

    private void mainMenuSearchArtistsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuSearchArtistsButtonActionPerformed
        // hide main menu and show search artists frame
        hideMainFrame();
        showDiscoverArtistsFrame();
    }//GEN-LAST:event_mainMenuSearchArtistsButtonActionPerformed

    private void backFromLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromLoginButtonActionPerformed
        // hide login frame and show main frame
        hideLoginFrame();
        showMainFrame();
    }//GEN-LAST:event_backFromLoginButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // validate the credentials
        if (!(usernameTextField.getText().equals(usrname) && passwordTextField.getText().equals(password))) {
            JOptionPane.showMessageDialog(loginFrame, "The credentials do not match. Please try again!", "Incorrect Credentials", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //if credentials are right, show the database frame and hide login frame
        clearLoginScreen();
        hideLoginFrame();
        showDatabaseFrame();
    }//GEN-LAST:event_loginButtonActionPerformed

    private void menuExitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitOptionActionPerformed
        // exit the application with status code : 0 meaning normal exit
        System.exit(0);
    }//GEN-LAST:event_menuExitOptionActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        // open the help.pdf file if available
        try {
            Desktop.getDesktop().open(new File(getClass().getResource("help.pdf").getPath().replace("%20", " ")));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(menuBar.getRootPane(), "The help file could not be found!!", "File not Found", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_HelpActionPerformed

    private void backFromDiscoverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromDiscoverButtonActionPerformed
        // hide discover frame and show main frame
        hideDiscoverArtistsFrame();
        showMainFrame();
    }//GEN-LAST:event_backFromDiscoverButtonActionPerformed

    private void searchArtistsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchArtistsButtonActionPerformed
        // search for the artist in our list
        int artistsInd = binarySearchArtists(allArtists.toArray(new String[allArtists.size()]), searchArtistsTextField.getText());

        //if not found, show appropriate message
        if (artistsInd == -1) {
            JOptionPane.showMessageDialog(discoverArtistsFrame, "No such artists were found! Please try again!", "Not Found!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //if found, show the showcase frame
        hideDiscoverArtistsFrame();
        prepareShowcase(artistsInd);
        showArtistsShowcaseFrame();
    }//GEN-LAST:event_searchArtistsButtonActionPerformed

    private void backFromShowcaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromShowcaseButtonActionPerformed
        // hide showcase frame and show discover artists frame
        hideArtistsShowcaseFrame();
        showDiscoverArtistsFrame();
    }//GEN-LAST:event_backFromShowcaseButtonActionPerformed

    private void menuOpenOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenOptionActionPerformed
        // load Loadpurchases.csv to table
        try {
            File purchasesFile = new File(getClass().getResource("LoadPurchases.csv").getPath().replace("%20", " "));

            Scanner myReader = new Scanner(purchasesFile);

            //read each line
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();

                String[] values = data.split(",");

                //add each line to list and redraw table
                addToList(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], Float.parseFloat(values[10]), true);
            }
            myReader.close(); //close the reader
        } catch (IOException | NullPointerException ex) {
            //if file not found show message
            JOptionPane.showMessageDialog(menuBar.getRootPane(), "Could not load the CSV file.", "File not Found!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuOpenOptionActionPerformed

    private void songComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songComboBoxActionPerformed
        // check if this is not automatic change
        if (!automaticComboBoxChange) {
            //reset all other comboboxes
            resetGenreComboBox();
            resetArtistsComboBox();
            resetAlbumsComboBox();

            //get song object and name
            String selectedSongName = (String) songComboBox.getSelectedItem();
            Song selectedSongObj = new Song("", "", "", "", 0.f);

            for (Song s : allSongs) {
                if (s.name == selectedSongName) {
                    selectedSongObj = s;
                    break;
                }
            }

            //change selection according to selected song
            changeSongsComboBoxes(selectedSongObj);
        }

        //set the price
        setPriceFromSongName();
    }//GEN-LAST:event_songComboBoxActionPerformed

    private void albumComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_albumComboBoxActionPerformed
        //similar to song combo box
        if (!automaticComboBoxChange) {
            resetGenreComboBox();
            resetArtistsComboBox();

            ArrayList<String> allTitlesInAlbum = new ArrayList<>();
            String selectedAlbum = (String) albumComboBox.getSelectedItem();

            Song firstSongInAlbum = new Song("", "", "", "", 0.f);

            boolean albumFound = false;
            for (Song s : allSongs) {
                if (s.album.equals(selectedAlbum)) {
                    allTitlesInAlbum.add(s.name);
                    if (!albumFound) {
                        firstSongInAlbum = s;
                    }
                    albumFound = true;
                }
            }

            //change the list of songs
            setComboBoxModel(songComboBox, allTitlesInAlbum.toArray(new String[allTitlesInAlbum.size()]));

            changeSongsComboBoxes(firstSongInAlbum);
        }
        //set the price
        setPriceFromSongName();
    }//GEN-LAST:event_albumComboBoxActionPerformed

    private void artistComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artistComboBoxActionPerformed
        // similar to above combo boxes
        if (!automaticComboBoxChange) {
            resetGenreComboBox();

            ArrayList<String> allTitlesFromArtist = new ArrayList<>();
            ArrayList<String> allAlbumsFromArtist = new ArrayList<>();
            String selectedArtist = (String) artistComboBox.getSelectedItem();

            Song firstSongInAlbum = new Song("", "", "", "", 0.f);

            boolean albumFound = false;
            for (Song s : allSongs) {
                if (s.artist.equals(selectedArtist)) {
                    if (!allAlbumsFromArtist.contains(s.album)) {
                        allAlbumsFromArtist.add(s.album);
                    }
                    allTitlesFromArtist.add(s.name);
                    if (!albumFound) {
                        firstSongInAlbum = s;
                    }
                    albumFound = true;
                }
            }

            setComboBoxModel(songComboBox, allTitlesFromArtist.toArray(new String[allTitlesFromArtist.size()]));
            setComboBoxModel(albumComboBox, allAlbumsFromArtist.toArray(new String[allAlbumsFromArtist.size()]));

            changeSongsComboBoxes(firstSongInAlbum);
        }
        setPriceFromSongName();
    }//GEN-LAST:event_artistComboBoxActionPerformed

    private void genreComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreComboBoxActionPerformed
        // similar to above combo boxes
        if (!automaticComboBoxChange) {
            ArrayList<String> allTitlesOnGenre = new ArrayList<>();
            ArrayList<String> allAlbumsOnGenre = new ArrayList<>();
            ArrayList<String> allArtistsOnGenre = new ArrayList<>();

            String selectedGenre = (String) genreComboBox.getSelectedItem();

            Song firstSongInGenre = new Song("", "", "", "", 0.f);

            boolean albumFound = false;
            for (Song s : allSongs) {
                if (s.genre.equals(selectedGenre)) {
                    if (!allAlbumsOnGenre.contains(s.album)) {
                        allAlbumsOnGenre.add(s.album);
                    }
                    if (!allArtistsOnGenre.contains(s.artist)) {
                        allArtistsOnGenre.add(s.artist);
                    }
                    allTitlesOnGenre.add(s.name);
                    if (!albumFound) {
                        firstSongInGenre = s;
                    }
                    albumFound = true;
                }
            }

            setComboBoxModel(artistComboBox, allArtistsOnGenre.toArray(new String[allArtistsOnGenre.size()]));
            setComboBoxModel(songComboBox, allTitlesOnGenre.toArray(new String[allTitlesOnGenre.size()]));
            setComboBoxModel(albumComboBox, allAlbumsOnGenre.toArray(new String[allAlbumsOnGenre.size()]));

            changeSongsComboBoxes(firstSongInGenre);
        }
        setPriceFromSongName();
    }//GEN-LAST:event_genreComboBoxActionPerformed

    private void showcaseAlbumsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showcaseAlbumsComboBoxActionPerformed
        // change the label to show all the songs in that album
        artistsSongsLabel.setText("");
        String songString = "<html><body>"; //use html for break lines

        ArrayList<String> albumSongs = new ArrayList<>(); //list to store all songs for this album
        String selectedAlbum = (String) showcaseAlbumsComboBox.getSelectedItem();
        for (Song s : allSongs) {
            if (s.artist.equals(artistNameLabel.getText()) && s.album.equals(selectedAlbum)) {
                albumSongs.add(s.name);
            }
        }

        songString += String.join("<br>", albumSongs);

        songString += "</body></html>";

        artistsSongsLabel.setText(songString); //set the text
    }//GEN-LAST:event_showcaseAlbumsComboBoxActionPerformed

    private void rentRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentRadioButtonActionPerformed
        // change the price according to radio button selection
        setPriceFromSongName();

    }//GEN-LAST:event_rentRadioButtonActionPerformed

    private void cashRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cashRadioButtonActionPerformed

    private void phoneTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ABYSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ABYSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ABYSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABYSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ABYSS().setVisible(true);
            }
        });
    }

    public void loadAllSongs() {
        //loads the songs data into variables
        try {
            //get file using relative path
            File songsFile = new File(getClass().getResource("Songs.csv").getPath().replace("%20", " "));

            Scanner myReader = new Scanner(songsFile);

            while (myReader.hasNextLine()) {
                //read each line
                String data = myReader.nextLine();

                //split using the splitter
                String[] values = data.split("\\|\\|\\|\\|"); //splitter = '||||', since | is special character in regex, \\ is used

                //get indiviudal data
                String artist = values[0];
                String album = values[1];
                String genre = values[2];
                String song = values[3];
                float cost = Float.parseFloat(values[4]);

                //make song obj and add to list
                Song s = new Song(song, artist, album, genre, cost);
                allSongs.add(s);

                //add unique items to lists
                if (!allGenres.contains(genre)) {
                    allGenres.add(genre);
                }
                if (!allArtists.contains(artist)) {
                    allArtists.add(artist);
                }
                if (!allAlbums.contains(album)) {
                    allAlbums.add(album);
                }
                if (!allTitles.contains(song)) {
                    allTitles.add(song);
                }
            }

            // load all images from the folder
            for (String artist : allArtists) {
                File imgFile = new File(getClass().getResource("Artists//" + artist + ".jpg").getPath().replace("%20", " "));
                Image artistPic = ImageIO.read(imgFile).getScaledInstance(200, 200, Image.SCALE_DEFAULT);
                artistImages.add(new ImageIcon(artistPic));
            }
            myReader.close(); //close the reader
            costTextField.setText(String.valueOf(allSongs.get(0).cost)); //set the cost to first song
            resetAllSongsComboBox();
        } catch (IOException | NullPointerException ex) {
            //disable search feature if any exception
            JOptionPane.showMessageDialog(menuBar.getRootPane(), "Could not load the songs file. You wont be able to use the artists discovery feature.", "File not Found!", JOptionPane.ERROR_MESSAGE);
            disableSearchArtists();
        }
    }

    public void addToList(String custName, String custPhone, String custAddress, String genre, String artist, String album, String title, String purchaseType, String paidVia, float cost, boolean reDrawTable) {
        //add to list by auto generating customer id
        String custId = String.valueOf(newCustId);
        if (oldCustId != -1) {
            custId = String.valueOf(oldCustId);
        }

        addToList(custId, custName, custPhone, custAddress, genre, artist, album, title, purchaseType, paidVia, cost, true);
    }

    public void addToList(String custId, String custName, String custPhone, String custAddress, String genre, String artist, String album, String title, String purchaseType, String paidVia, float cost, boolean reDrawTable) {
        //adds to the list allPurchases and redraws the table if required.
        if (Integer.parseInt(custId) >= newCustId) {
            newCustId = Integer.parseInt(custId) + 1; //set the new cust id for further purchases
        }

        Purchase newPurchase = new Purchase(custId, custName, custPhone, custAddress, genre, artist, album, title, purchaseType, paidVia, cost);

        //calculate the sorted order array values before insertion
        if (allPurchases.size() > 0) {
            for (int j = 0; j < Purchase.noOfCols; j++) {
                String[] allValues = new String[allPurchases.size()];

                for (int i = 0; i < allPurchases.size(); i++) {
                    Purchase o = allPurchases.get(i);
                    allValues[o.sortedOrder[j]] = allPurchases.get(i).getInTableFormat()[j];
                }

                int indToInsert = getIndexFromBinSearch(allValues, newPurchase.getInTableFormat()[j]);

                newPurchase.sortedOrder[j] = indToInsert;

                for (Purchase o : allPurchases) {
                    if (o.sortedOrder[j] >= indToInsert) {
                        o.sortedOrder[j]++;
                    }
                }
            }
        }

        //add to list
        allPurchases.add(newPurchase);

        //redraw if parameter is true
        if (reDrawTable) {
            reDrawTableUsingList(false, -1);
        }
    }

    public int getIndexFromBinSearch(String[] arr, String target) {
        //get the index of item when inserted to keep arr sorted
        int high = arr.length - 1, low = 0, mid = (high + low) / 2;

        //binary search algorithm
        while (high >= low) {
            if (isStringGreater(arr[mid], target)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            mid = (low + high) / 2;

        }

        //based on the values determine whether to insert to left or right of the mid
        if (mid == low) {
            if (high < 0) {
                return 0;
            }
            return high;
        } else {
            return low;
        }
    }

    public int binarySearchElement(String[] arr, String target) {
        //edge case if arr is empty
        if (arr.length == 0) {
            return -1;
        }

        int high = arr.length - 1, low = 0, mid = ((high - low) / 2) + low;

        while (high >= low) {
            if (arr[mid].equals(target)) {
                return mid;
            }

            if (isStringGreater(arr[mid], target)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            mid = ((high - low) / 2) + low;
        }

        //edge case handling
        if (mid < 0 || mid >= arr.length) {
            return -1;
        }
        if (arr[mid].equals(target)) {
            return mid;
        }
        return -1;
    }

    public int binarySearchArtists(String[] arr, String target) {
        //same as above search
        //except for comparision is done with .contains() method
        if (arr.length == 0) {
            return -1;
        }

        int high = arr.length - 1, low = 0, mid = ((high - low) / 2) + low;

        while (high >= low) {
            if (arr[mid].toLowerCase().contains(target.toLowerCase())) {
                return mid;
            }

            if (isStringGreater(arr[mid], target)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            mid = ((high - low) / 2) + low;
        }
        if (mid < 0 || mid >= arr.length) {
            return -1;
        }
        if (arr[mid].toLowerCase().contains(target.toLowerCase())) {
            return mid;
        }
        return -1;
    }

    public boolean isStringGreater(String str1, String str2) {
        //returns true if str2 comes before str1 in the English Dictionary.(not case sensitive)
        //if they are the same, returns false.
        if (str1.equals("")) {
            return false;
        }
        if (str2.equals("")) {
            return true;
        }

        str1 = str1.toUpperCase();
        str2 = str2.toUpperCase();

        int i = 0;
        while (str1.charAt(i) == str2.charAt(i)) {
            i++;
            if (i >= str1.length()) {
                return false;
            } else if (i >= str2.length()) {
                return true;
            }
        }
        int str1Int = (int) str1.charAt(i);
        int str2Int = (int) str2.charAt(i);
        return str1Int > str2Int;
    }

    public void reDrawTableUsingList(boolean isSorted, int colToSort) {
        //redraw the rable using the list
        //parameter:    isSorted: whether or not to sort a table
        //              colToSort: column to sort the table by

        int totalRows = databaseTable.getRowCount();
        for (int i = 0; i < totalRows; i++) {
            DefaultTableModel tableModel = (DefaultTableModel) databaseTable.getModel();
            tableModel.removeRow(0);
        }

        for (int i = 0; i < allPurchases.size(); i++) {
            addEmptyRow();
        }

        //toogle ascending descending if already sorted
        if (curSortedCol == colToSort) {
            asc = !asc;
        } else {
            asc = true;
        }
        if (isSorted) {
            curSortedCol = colToSort;
        }

        //set the avlues to table
        for (int i = 0; i < allPurchases.size(); i++) {
            String[] values = allPurchases.get(i).getInTableFormat();
            int rowForMod = i;
            if (isSorted) {
                rowForMod = allPurchases.get(i).sortedOrder[colToSort];
                if (!asc) {
                    rowForMod = databaseTable.getRowCount() - rowForMod - 1;
                }
            }
            for (int j = 0; j < values.length; j++) {
                databaseTable.setValueAt(values[j], rowForMod, j);
            }
        }
    }

    public void addEmptyRow() {
        //add one empty row to table
        DefaultTableModel tableModel = (DefaultTableModel) databaseTable.getModel();
        tableModel.addRow(new Object[]{null});
    }

    public void clearAllBuyFields(boolean clearCustomerDetails) {
        //reset all te components of buy frame

        //clear customer details if parameter is true
        if (clearCustomerDetails) {
            nameTextField.setText("");
            phoneTextField.setText("");
            addressTextField.setText("");
        }

        //reset everything else
        genreComboBox.setSelectedIndex(0);
        artistComboBox.setSelectedIndex(0);
        albumComboBox.setSelectedIndex(0);
        songComboBox.setSelectedIndex(0);

        buyRadioButton.setSelected(true);
        cashRadioButton.setSelected(true);

        //reset the price
        setPriceFromSongName();
    }

    public void makeFieldNumOnly(JTextField f) {
        //make field f accept numbers only
        f.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent e) {
                String fieldVal = f.getText();

                //check if field contains alphabets
                try {
                    Integer.parseInt(fieldVal);
                } catch (NumberFormatException ex) {
                    String newString = "";

                    //prepare alphabets-less string
                    for (int i = 0; i < fieldVal.length(); i++) {
                        char iChar = fieldVal.charAt(i);
                        int charAsc = (int) iChar;

                        if (charAsc < 48 || charAsc > 57) {
                            continue;
                        }

                        newString += iChar;
                    }
                    //set the string
                    f.setText(newString);
                }
            }
        });
    }

    public void makeFieldTextOnly(JTextField f) {
        //same as above except for accepting text only
        f.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent e) {
                String origVal = f.getText();
                String loweredVal = origVal.toLowerCase();

                String newString = "";
                for (int i = 0; i < loweredVal.length(); i++) {
                    char iChar = loweredVal.charAt(i);
                    int charAsc = (int) iChar;

                    if ((charAsc < 97 || charAsc > 122) && iChar != ' ') {
                        continue;
                    }

                    newString += origVal.charAt(i);
                }
                f.setText(newString);
            }
        });
    }

    public void readyUpdateDialog() {
        // set the values of update - fields from the table
        String[] allCols = allPurchases.get(databaseSelectedRow).getInTableFormat();
        updatedNameField.setText(allCols[1]);
        updatedPhoneField.setText(allCols[2]);
        updatedAddressField.setText(allCols[3]);
        updateGenreField.setText(allCols[4]);
        updateArtistField.setText(allCols[5]);
        updateAlbumField.setText(allCols[6]);
        updateSongField.setText(allCols[7]);

        switch (allCols[8]) {
            case "Buy":
                updatedBuyRadioButton.setSelected(true);
                break;

            case "Rent":
                updatedRentRadioButton.setSelected(true);
                break;
        }

        switch (allCols[9]) {
            case "Cash":
                updatedCashRadioButton.setSelected(true);
                break;

            case "Card":
                updatedCardRadioButton.setSelected(true);
                break;

            case "E-pay":
                updatedEPayRadioButton.setSelected(true);
                break;
        }

        updatedCostField.setText(String.valueOf(allCols[10]));
    }

    public void deleteSelectedRow() {
        //delete the selected row from the database table
        DefaultTableModel dbModel = (DefaultTableModel) databaseTable.getModel();

        dbModel.removeRow(databaseSelectedRow);
        Purchase removedPurchase = allPurchases.remove(databaseSelectedRow);

        for (int i = 0; i < removedPurchase.sortedOrder.length; i++) {
            int removedInd = removedPurchase.sortedOrder[i];

            for (Purchase s : allPurchases) {
                if (s.sortedOrder[i] > removedInd) {
                    s.sortedOrder[i]--;
                }
            }
        }

        disableUpdDelButtons();
    }

    public void clearSearch() {
        //clear search field in database table
        searchTextField.setText("");
        reDrawTableUsingList(false, -1);
    }

    //methods for toggling visibility of frames, buttons and menu items
    public void showMainFrame() {
        mainMenuFrame.setVisible(true);
        applyMenuBar(mainMenuFrame);
    }

    public void hideMainFrame() {
        mainMenuFrame.setVisible(false);
    }

    public void showBuyFrame() {
        buyFrame.setVisible(true);
        applyMenuBar(buyFrame);
        setPriceFromSongName();
        resetAllSongsComboBox();
    }

    public void hideBuyFrame() {
        buyFrame.setVisible(false);
        clearAllBuyFields(true);
        resetOldCustomerId();
    }

    public void showDatabaseFrame() {
        databaseFrame.setVisible(true);
        reDrawTableUsingList(false, -1);
        applyMenuBar(databaseFrame);
        enableOpenOption();
    }

    public void hideDatabaseFrame() {
        databaseFrame.setVisible(false);
        searchTextField.setText("");
        disableOpenOption();
    }

    public void showUpdateDialog() {
        updateDialogBox.setVisible(true);
    }

    public void hideUpdateDialog() {
        updateDialogBox.setVisible(false);
    }

    public void enableUpdDelButtons() {
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }

    public void disableUpdDelButtons() {
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);

        databaseSelectedRow = -1;
    }

    public void enableOpenOption() {
        menuOpenOption.setEnabled(true);
    }

    public void disableOpenOption() {
        menuOpenOption.setEnabled(false);
    }

    public void showDiscoverArtistsFrame() {
        discoverArtistsFrame.setVisible(true);
        applyMenuBar(discoverArtistsFrame);
    }

    public void hideDiscoverArtistsFrame() {
        searchArtistsTextField.setText("");
        discoverArtistsFrame.setVisible(false);
    }

    public void showArtistsShowcaseFrame() {
        artistsShowcaseFrame.setVisible(true);
        applyMenuBar(artistsShowcaseFrame);
    }

    public void hideArtistsShowcaseFrame() {
        artistsShowcaseFrame.setVisible(false);
    }

    public void showLoginFrame() {
        loginFrame.setVisible(true);
    }

    public void hideLoginFrame() {
        loginFrame.setVisible(false);
    }

    //end of visiblity methods
    public void resetOldCustomerId() {
        oldCustId = -1;
    }

    public void disableSearchArtists() {
        mainMenuSearchArtistsButton.setEnabled(false);
    }

    public void clearArtistSearch() {
        searchArtistsTextField.setText("");
    }

    public void clearLoginScreen() {
        usernameTextField.setText("");
        passwordTextField.setText("");
    }

    public void applyMenuBar(JFrame f) {
        //set the menubar to f
        menuBar.setSize(f.getWidth(), menuBar.getHeight());
        f.setJMenuBar(menuBar);
    }

    public void prepareShowcase(int artistInd) {
        //set the components of showcase according to selected artist
        imageLabel.setIcon(artistImages.get(artistInd));
        artistNameLabel.setText(allArtists.get(artistInd));
        artistNameLabel.setSize(artistNameLabel.getPreferredSize());
        artistsSongsLabel.setText("");

        ArrayList<String> artistGenres = new ArrayList<>();
        ArrayList<String> artistAlbums = new ArrayList<>();

        for (Song s : allSongs) {
            if (s.artist.equals(allArtists.get(artistInd))) {
                if (!artistGenres.contains(s.genre)) {
                    artistGenres.add(s.genre);
                }

                if (!artistAlbums.contains(s.album)) {
                    artistAlbums.add(s.album);
                }
            }
        }
        showcaseGenreLabel.setText(String.join(",", artistGenres));
        setComboBoxModel(showcaseAlbumsComboBox, artistAlbums.toArray(new String[artistAlbums.size()]));
        changeSelectionOfComboBox(showcaseAlbumsComboBox, artistAlbums.get(0));
    }

    //reset all combo boxes in buy frame
    public void resetAllSongsComboBox() {
        resetGenreComboBox();
        resetAlbumsComboBox();
        resetArtistsComboBox();
        resetTitlesComboBox();
    }

    public void resetGenreComboBox() {
        setComboBoxModel(genreComboBox, allGenres.toArray(new String[allGenres.size()]));
    }

    public void resetAlbumsComboBox() {
        setComboBoxModel(albumComboBox, allAlbums.toArray(new String[allAlbums.size()]));
    }

    public void resetArtistsComboBox() {
        setComboBoxModel(artistComboBox, allArtists.toArray(new String[allArtists.size()]));
    }

    public void resetTitlesComboBox() {
        setComboBoxModel(songComboBox, allTitles.toArray(new String[allTitles.size()]));
    }

    public void setComboBoxModel(JComboBox c, String[] arr) {
        DefaultComboBoxModel<String> cModel = new DefaultComboBoxModel<>(arr);
        c.setModel(cModel);
    }

    public void changeSelectionOfComboBox(JComboBox c, String i) {
        c.setSelectedItem(i);
    }

    public void changeSongsComboBoxes(Song s) {
        //automatic changing of combobox items based on selection
        automaticComboBoxChange = true;
        genreComboBox.setSelectedItem(s.genre);
        albumComboBox.setSelectedItem(s.album);
        artistComboBox.setSelectedItem(s.artist);
        songComboBox.setSelectedItem(s.name);
        costTextField.setText(String.valueOf(s.cost));
        automaticComboBoxChange = false;
    }

    public void setPriceFromSongName() {
        //set price based on the selected song
        String selectedSongName = (String) songComboBox.getSelectedItem();

        float discount = 1.f;
        //change price based on selected purchase type
        if (purchaseTypeButtonGroup.getSelection().getActionCommand().equals("Rent")) {
            discount = 0.5f;
        }

        for (Song s : allSongs) {
            if (s.name.equals(selectedSongName)) {
                costTextField.setText(String.valueOf(s.cost * discount));
                break;
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Help;
    private javax.swing.JTextField addressTextField;
    private javax.swing.JComboBox<String> albumComboBox;
    private javax.swing.JLabel albumLabel;
    private javax.swing.JComboBox<String> artistComboBox;
    private javax.swing.JLabel artistLabel;
    private javax.swing.JLabel artistNameLabel;
    private javax.swing.JPanel artistsMainContainer;
    private javax.swing.JFrame artistsShowcaseFrame;
    private javax.swing.JLabel artistsSongsLabel;
    private javax.swing.JButton backFromDiscoverButton;
    private javax.swing.JButton backFromLoginButton;
    private javax.swing.JButton backFromShowcaseButton;
    private javax.swing.JButton buyBackButton;
    private javax.swing.JPanel buyFormPanel;
    private javax.swing.JFrame buyFrame;
    private javax.swing.JButton buyNavigateButton;
    private javax.swing.JPanel buyNavigationPanel;
    private javax.swing.JRadioButton buyRadioButton;
    private javax.swing.JRadioButton cardRadioButton;
    private javax.swing.JRadioButton cashRadioButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearSearchButton;
    private javax.swing.JLabel costLabel;
    private javax.swing.JTextField costTextField;
    private javax.swing.JButton databaseBackButton;
    private javax.swing.JFrame databaseFrame;
    private javax.swing.JButton databaseNavigateButton;
    private javax.swing.JPanel databaseNavigationPanel;
    private javax.swing.JTable databaseTable;
    private javax.swing.JPanel databaseTablePanel;
    private javax.swing.JScrollPane databaseTableScrollPane;
    private javax.swing.JButton deleteButton;
    private javax.swing.JFrame discoverArtistsFrame;
    private javax.swing.JPanel discoverArtistsMainContainer;
    private javax.swing.JLabel discoverLabel;
    private javax.swing.JButton doneButton;
    private javax.swing.JRadioButton epayRadioButton;
    private javax.swing.JComboBox<String> genreComboBox;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JFrame loginFrame;
    private javax.swing.JLabel loginMessageLabel;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JButton mainMenuBuyButton;
    private javax.swing.JButton mainMenuDatabaseButton;
    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JButton mainMenuSearchArtistsButton;
    private javax.swing.JMenu menuAboutOption;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuExitOption;
    private javax.swing.JMenu menuFileOption;
    private javax.swing.JMenuItem menuOpenOption;
    private javax.swing.JTextField nameTextField;
    private javax.swing.ButtonGroup paidViaButtonGroup;
    private javax.swing.JLabel paidViaLabel;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.ButtonGroup purchaseTypeButtonGroup;
    private javax.swing.JLabel purchaseTypeLabel;
    private javax.swing.JRadioButton rentRadioButton;
    private javax.swing.JButton searchArtistsButton;
    private javax.swing.JTextField searchArtistsTextField;
    private javax.swing.JComboBox<String> searchByComboBox;
    private javax.swing.JLabel searchByLabel;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JComboBox<String> showcaseAlbumsComboBox;
    private javax.swing.JLabel showcaseGenreLabel;
    private javax.swing.JComboBox<String> songComboBox;
    private javax.swing.JLabel songLabel;
    private javax.swing.JLabel staticAlbumsLabelShowcase;
    private javax.swing.JLabel staticAlbumsLabelShowcase1;
    private javax.swing.JLabel staticGenreLabelShowcase;
    private javax.swing.JTextField updateAlbumField;
    private javax.swing.JTextField updateArtistField;
    private javax.swing.JButton updateButton;
    private javax.swing.JDialog updateDialogBox;
    private javax.swing.JPanel updateFormPanel;
    private javax.swing.JTextField updateGenreField;
    private javax.swing.JButton updateRowButton;
    private javax.swing.JTextField updateSongField;
    private javax.swing.JTextField updatedAddressField;
    private javax.swing.JLabel updatedAlbumLabel;
    private javax.swing.JLabel updatedArtistsLabel;
    private javax.swing.JRadioButton updatedBuyRadioButton;
    private javax.swing.JRadioButton updatedCardRadioButton;
    private javax.swing.JRadioButton updatedCashRadioButton;
    private javax.swing.JTextField updatedCostField;
    private javax.swing.JLabel updatedCostLabel;
    private javax.swing.JRadioButton updatedEPayRadioButton;
    private javax.swing.JLabel updatedGenreLabel;
    private javax.swing.JTextField updatedNameField;
    private javax.swing.ButtonGroup updatedPaidViaButtonGroup;
    private javax.swing.JLabel updatedPaidViaLabel;
    private javax.swing.JTextField updatedPhoneField;
    private javax.swing.ButtonGroup updatedPurchaseTypeButtonGroup;
    private javax.swing.JLabel updatedPurchaseTypeLabel;
    private javax.swing.JRadioButton updatedRentRadioButton;
    private javax.swing.JLabel updatedSongLabel;
    private javax.swing.JLabel usernameLable;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
